{"ast":null,"code":"var _jsxFileName = \"/Users/kqasolli/Desktop/travel-ed/src/components/content/AddComment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n//import Comment from './Comment'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AddComment(_ref) {\n  _s();\n  let {\n    animal,\n    setAnimals\n  } = _ref;\n  const [newReply, setnewReply] = useState(\"\");\n  const [showReply, setshowReply] = useState(false);\n  const [likeComment, setLikeComment] = useState({});\n  function handleCommentChange(event) {\n    setnewReply(event.target.value);\n  }\n  function handleCommentSubmit(e) {\n    e.preventDefault();\n    if (newReply) {\n      const updatedAnimal = {\n        ...animal\n      };\n      if (!updatedAnimals.comments) {\n        updatedAnimals.comments = [];\n      }\n      updated;\n      fetch(`http://localhost:3000/animals/${animal.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"content-type\": \"application/json\",\n          accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          comments: [...animal.comments, [newReply]]\n        }\n        //{ comments: [...animal.comments, {text: newReply, likes:0, reply: [], id: animal.comments.length +1}] }\n        )\n      }).then(response => response.json()).then(updatedAnimals => {\n        const updatedAnimalsArray = animal.map(currentAnimals => {\n          if (currentAnimals.id === updatedAnimals.id) {\n            return updatedAnimals;\n          } else {\n            return currentAnimals;\n          }\n        });\n        setAnimals(updatedAnimalsArray);\n      });\n    }\n    setnewReply(\"\");\n    setshowReply(true);\n  }\n  function likeComments(index) {\n    setLikeComment(prev => {\n      let newLikeComment = {\n        ...prev\n      };\n      newLikeComment[index] = !newLikeComment[index];\n      return newLikeComment;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [animal.comments.map((comments, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"comments-list\",\n          animal: animal,\n          setAnimals: setAnimals,\n          children: comments\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"like-reply\",\n          onClick: () => likeComments(index),\n          children: [likeComment[index] ? '♥' : '♡', \"Like\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"like-reply\",\n          children: \"\\u21B3 Reply\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)), showReply && /*#__PURE__*/_jsxDEV(\"li\", {\n        children: newReply\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          value: newReply,\n          onChange: handleCommentChange,\n          placeholder: \"Write a comment...\",\n          className: \"type-comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-comment-btn\",\n          type: \"submit\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(AddComment, \"6IIkv03eDGo9TpQeiOnhN880mUw=\");\n_c = AddComment;\nvar _c;\n$RefreshReg$(_c, \"AddComment\");","map":{"version":3,"names":["React","useState","AddComment","animal","setAnimals","newReply","setnewReply","showReply","setshowReply","likeComment","setLikeComment","handleCommentChange","event","target","value","handleCommentSubmit","e","preventDefault","updatedAnimal","updatedAnimals","comments","updated","fetch","id","method","headers","accept","body","JSON","stringify","then","response","json","updatedAnimalsArray","map","currentAnimals","likeComments","index","prev","newLikeComment"],"sources":["/Users/kqasolli/Desktop/travel-ed/src/components/content/AddComment.js"],"sourcesContent":["import React, { useState } from 'react'\n//import Comment from './Comment'\n\nexport default function AddComment({animal, setAnimals}) {\n  const [newReply, setnewReply] = useState(\"\")\n  const [showReply, setshowReply] = useState(false)\n  const [likeComment, setLikeComment] = useState({})\n\n  function handleCommentChange(event) {\n    setnewReply(event.target.value)\n  }\n\n  function handleCommentSubmit(e) {\n    e.preventDefault()\n    if(newReply) {\n      const updatedAnimal = {...animal}\n      if(!updatedAnimals.comments) {\n        updatedAnimals.comments = []\n      }\n      updated\n      fetch(`http://localhost:3000/animals/${animal.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"content-type\": \"application/json\",\n          accept: \"application/json\"\n        },\n        body: JSON.stringify(\n          {comments: [...animal.comments, [newReply]]}\n          //{ comments: [...animal.comments, {text: newReply, likes:0, reply: [], id: animal.comments.length +1}] }\n          )\n      })\n      .then(response => response.json())\n      .then(updatedAnimals => {\n          const updatedAnimalsArray = animal.map(currentAnimals => {\n              if(currentAnimals.id === updatedAnimals.id) {\n                  return updatedAnimals\n              } else {\n                  return currentAnimals\n              }\n          })\n          setAnimals(updatedAnimalsArray)\n      })\n    }\n    setnewReply(\"\")\n    setshowReply(true)\n  }\n\n  function likeComments(index) {\n    setLikeComment(prev => {\n      let newLikeComment = {...prev}\n      newLikeComment[index] = !newLikeComment[index]\n      return newLikeComment\n    });\n  }\n  return (\n    <div>\n      <form onSubmit={handleCommentSubmit} >\n          {animal.comments.map((comments, index) => (\n            <>\n            <li className=\"comments-list\" \n            key={index} \n            animal={animal}\n            setAnimals={setAnimals}>\n              {comments} \n              </li>\n          <button \n          className=\"like-reply\" \n          onClick={() => likeComments(index)}>\n            {likeComment[index]? '♥' :'♡' } \n            Like\n            </button>\n            <button className=\"like-reply\">↳ Reply</button>\n            </>\n          ))}\n          {showReply && <li>{newReply}</li>}\n          <div className='comment-form'>\n            <textarea \n              type=\"text\" \n              value={newReply} \n              onChange={handleCommentChange} \n              placeholder=\"Write a comment...\"\n              className=\"type-comment\"\n            />\n            <button className=\"post-comment-btn\" type=\"submit\">Post</button>\n          </div>\n      </form>\n     \n    </div>\n  )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AAAA;AAAA;AAEA,eAAe,SAASC,UAAU,OAAuB;EAAA;EAAA,IAAtB;IAACC,MAAM;IAAEC;EAAU,CAAC;EACrD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElD,SAASU,mBAAmB,CAACC,KAAK,EAAE;IAClCN,WAAW,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC;EAEA,SAASC,mBAAmB,CAACC,CAAC,EAAE;IAC9BA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAGZ,QAAQ,EAAE;MACX,MAAMa,aAAa,GAAG;QAAC,GAAGf;MAAM,CAAC;MACjC,IAAG,CAACgB,cAAc,CAACC,QAAQ,EAAE;QAC3BD,cAAc,CAACC,QAAQ,GAAG,EAAE;MAC9B;MACAC,OAAO;MACPC,KAAK,CAAE,iCAAgCnB,MAAM,CAACoB,EAAG,EAAC,EAAE;QAClDC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,MAAM,EAAE;QACV,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAClB;UAACT,QAAQ,EAAE,CAAC,GAAGjB,MAAM,CAACiB,QAAQ,EAAE,CAACf,QAAQ,CAAC;QAAC;QAC3C;QAAA;MAEJ,CAAC,CAAC,CACDyB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACX,cAAc,IAAI;QACpB,MAAMc,mBAAmB,GAAG9B,MAAM,CAAC+B,GAAG,CAACC,cAAc,IAAI;UACrD,IAAGA,cAAc,CAACZ,EAAE,KAAKJ,cAAc,CAACI,EAAE,EAAE;YACxC,OAAOJ,cAAc;UACzB,CAAC,MAAM;YACH,OAAOgB,cAAc;UACzB;QACJ,CAAC,CAAC;QACF/B,UAAU,CAAC6B,mBAAmB,CAAC;MACnC,CAAC,CAAC;IACJ;IACA3B,WAAW,CAAC,EAAE,CAAC;IACfE,YAAY,CAAC,IAAI,CAAC;EACpB;EAEA,SAAS4B,YAAY,CAACC,KAAK,EAAE;IAC3B3B,cAAc,CAAC4B,IAAI,IAAI;MACrB,IAAIC,cAAc,GAAG;QAAC,GAAGD;MAAI,CAAC;MAC9BC,cAAc,CAACF,KAAK,CAAC,GAAG,CAACE,cAAc,CAACF,KAAK,CAAC;MAC9C,OAAOE,cAAc;IACvB,CAAC,CAAC;EACJ;EACA,oBACE;IAAA,uBACE;MAAM,QAAQ,EAAExB,mBAAoB;MAAA,WAC/BZ,MAAM,CAACiB,QAAQ,CAACc,GAAG,CAAC,CAACd,QAAQ,EAAEiB,KAAK,kBACnC;QAAA,wBACA;UAAI,SAAS,EAAC,eAAe;UAE7B,MAAM,EAAElC,MAAO;UACf,UAAU,EAAEC,UAAW;UAAA,UACpBgB;QAAQ,GAHNiB,KAAK;UAAA;UAAA;UAAA;QAAA,QAIH,eACT;UACA,SAAS,EAAC,YAAY;UACtB,OAAO,EAAE,MAAMD,YAAY,CAACC,KAAK,CAAE;UAAA,WAChC5B,WAAW,CAAC4B,KAAK,CAAC,GAAE,GAAG,GAAE,GAAG,EAAE,MAE/B;QAAA;UAAA;UAAA;UAAA;QAAA,QAAS,eACT;UAAQ,SAAS,EAAC,YAAY;UAAA,UAAC;QAAO;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA,gBAEhD,CAAC,EACD9B,SAAS,iBAAI;QAAA,UAAKF;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAM,eACjC;QAAK,SAAS,EAAC,cAAc;QAAA,wBAC3B;UACE,IAAI,EAAC,MAAM;UACX,KAAK,EAAEA,QAAS;UAChB,QAAQ,EAAEM,mBAAoB;UAC9B,WAAW,EAAC,oBAAoB;UAChC,SAAS,EAAC;QAAc;UAAA;UAAA;UAAA;QAAA,QACxB,eACF;UAAQ,SAAS,EAAC,kBAAkB;UAAC,IAAI,EAAC,QAAQ;UAAA,UAAC;QAAI;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QAC5D;IAAA;MAAA;MAAA;MAAA;IAAA;EACH;IAAA;IAAA;IAAA;EAAA,QAEH;AAEV;AAAC,GAtFuBT,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
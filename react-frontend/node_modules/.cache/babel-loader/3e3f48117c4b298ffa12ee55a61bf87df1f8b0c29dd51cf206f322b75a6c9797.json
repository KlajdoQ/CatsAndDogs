{"ast":null,"code":"var _jsxFileName = \"/Users/kqasolli/Desktop/travel-ed/src/components/content/FetchCommentsForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FetchCommentsForm(_ref) {\n  _s();\n  var _this = this;\n  let {\n    animal,\n    setAnimals,\n    likeComments,\n    handleCommentSubmit\n  } = _ref;\n  return function (handleCommentSubmit) {\n    const [newComment, setnewComment] = useState(\"\");\n    const [showComment, setshowComment] = useState(false);\n    const [isLikeClicked, setIsLikeClicked] = useState(false);\n    function updateAnimals(e) {\n      if (newComment) {\n        fetch(`http://localhost:3000/animals/${animal.id}`, {\n          method: \"PATCH\",\n          headers: {\n            \"content-type\": \"application/json\",\n            accept: \"application/json\"\n          },\n          body: JSON.stringify({\n            comments: [...animal.comments, {\n              comment: newComment,\n              replies: [],\n              likes: 0\n            }]\n          })\n        }).then(response => response.json()).then(updatedAnimals => {\n          setAnimals(prevAnimals => prevAnimals.map(currentAnimals => {\n            if (currentAnimals.id === updatedAnimals.id) {\n              return updatedAnimals;\n            } else {\n              return currentAnimals;\n            }\n          }));\n        });\n      }\n      handleCommentSubmit();\n    }\n    function handleCommentChange(event) {\n      setnewComment(event.target.value);\n    }\n    function handleCommentSubmit(e) {\n      e.preventDefault();\n      if (newComment && !isLikeClicked) {\n        likeComments();\n        setnewComment(\"\");\n        updateAnimals();\n      }\n      setIsLikeClicked(false);\n      setnewComment(\"\");\n      setshowComment(true);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [showComment && /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"new-reply-li\",\n        children: newComment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          value: newComment,\n          onChange: handleCommentChange,\n          placeholder: \"Write a comment...\",\n          className: \"type-comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-comment-btn\",\n          type: \"submit\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true);\n  }(handleCommentSubmit);\n}\n_s(FetchCommentsForm, \"QgODDa8g+hJI0jmyOwL6Fizm1EM=\");\n_c = FetchCommentsForm;\nvar _c;\n$RefreshReg$(_c, \"FetchCommentsForm\");","map":{"version":3,"names":["React","useState","FetchCommentsForm","animal","setAnimals","likeComments","handleCommentSubmit","newComment","setnewComment","showComment","setshowComment","isLikeClicked","setIsLikeClicked","updateAnimals","e","fetch","id","method","headers","accept","body","JSON","stringify","comments","comment","replies","likes","then","response","json","updatedAnimals","prevAnimals","map","currentAnimals","handleCommentChange","event","target","value","preventDefault"],"sources":["/Users/kqasolli/Desktop/travel-ed/src/components/content/FetchCommentsForm.js"],"sourcesContent":["import React,{useState} from 'react'\n\nexport default function FetchCommentsForm({animal, setAnimals, likeComments,handleCommentSubmit}) {\n  const [newComment, setnewComment] = useState(\"\");\n  const [showComment, setshowComment] = useState(false);\n  const [isLikeClicked, setIsLikeClicked] = useState(false);\n\n  function updateAnimals(e) {\n  \n    if (newComment) {\n      fetch(`http://localhost:3000/animals/${animal.id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"content-type\": \"application/json\",\n          accept: \"application/json\",\n        },\n        body: JSON.stringify({\n          comments: [\n            ...animal.comments,\n            { comment: newComment, replies: [], likes: 0 },\n          ],\n        }),\n      })\n        .then((response) => response.json())\n        .then((updatedAnimals) => {\n          setAnimals((prevAnimals) =>\n            prevAnimals.map((currentAnimals) => {\n              if (currentAnimals.id === updatedAnimals.id) {\n                return updatedAnimals;\n              } else {\n                return currentAnimals;\n              }\n            })\n          )\n        })\n    }\n    handleCommentSubmit();\n  }\n  \n  function handleCommentChange(event) {\n    setnewComment(event.target.value);\n  }\n  \n  function handleCommentSubmit(e) {\n    e.preventDefault();\n    if (newComment && !isLikeClicked) {\n      likeComments();\n      setnewComment(\"\")\n      updateAnimals();\n    }\n    setIsLikeClicked(false);\n    setnewComment(\"\");\n    setshowComment(true);\n  }\n\n \n  return (\n    <>\n    {showComment && <li className=\"new-reply-li\">{newComment}</li>}\n      <div className=\"comment-form\">\n        <textarea\n          type=\"text\"\n          value={newComment}\n          onChange={handleCommentChange}\n          placeholder=\"Write a comment...\"\n          className=\"type-comment\"\n          />\n        <button className=\"post-comment-btn\" type=\"submit\">\n          Post\n        </button>\n      </div>\n    </>\n  )  \n}  \n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AAAA;AAAA;AAEpC,eAAe,SAASC,iBAAiB;EAAA;EAAA;EAAA,IAAC;IAACC,MAAM;IAAEC,UAAU;IAAEC,YAAY;IAACC;EAAmB,CAAC;EAAA,sCAAE;IAChG,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;IAChD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;IACrD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;IAEzD,SAASY,aAAa,CAACC,CAAC,EAAE;MAExB,IAAIP,UAAU,EAAE;QACdQ,KAAK,CAAE,iCAAgCZ,MAAM,CAACa,EAAG,EAAC,EAAE;UAClDC,MAAM,EAAE,OAAO;UACfC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClCC,MAAM,EAAE;UACV,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBC,QAAQ,EAAE,CACR,GAAGpB,MAAM,CAACoB,QAAQ,EAClB;cAAEC,OAAO,EAAEjB,UAAU;cAAEkB,OAAO,EAAE,EAAE;cAAEC,KAAK,EAAE;YAAE,CAAC;UAElD,CAAC;QACH,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,cAAc,IAAK;UACxB1B,UAAU,CAAE2B,WAAW,IACrBA,WAAW,CAACC,GAAG,CAAEC,cAAc,IAAK;YAClC,IAAIA,cAAc,CAACjB,EAAE,KAAKc,cAAc,CAACd,EAAE,EAAE;cAC3C,OAAOc,cAAc;YACvB,CAAC,MAAM;cACL,OAAOG,cAAc;YACvB;UACF,CAAC,CAAC,CACH;QACH,CAAC,CAAC;MACN;MACA3B,mBAAmB,EAAE;IACvB;IAEA,SAAS4B,mBAAmB,CAACC,KAAK,EAAE;MAClC3B,aAAa,CAAC2B,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACnC;IAEA,SAAS/B,mBAAmB,CAACQ,CAAC,EAAE;MAC9BA,CAAC,CAACwB,cAAc,EAAE;MAClB,IAAI/B,UAAU,IAAI,CAACI,aAAa,EAAE;QAChCN,YAAY,EAAE;QACdG,aAAa,CAAC,EAAE,CAAC;QACjBK,aAAa,EAAE;MACjB;MACAD,gBAAgB,CAAC,KAAK,CAAC;MACvBJ,aAAa,CAAC,EAAE,CAAC;MACjBE,cAAc,CAAC,IAAI,CAAC;IACtB;IAGA,oBACE;MAAA,WACCD,WAAW,iBAAI;QAAI,SAAS,EAAC,cAAc;QAAA,UAAEF;MAAU;QAAA;QAAA;QAAA;MAAA,SAAM,eAC5D;QAAK,SAAS,EAAC,cAAc;QAAA,wBAC3B;UACE,IAAI,EAAC,MAAM;UACX,KAAK,EAAEA,UAAW;UAClB,QAAQ,EAAE2B,mBAAoB;UAC9B,WAAW,EAAC,oBAAoB;UAChC,SAAS,EAAC;QAAc;UAAA;UAAA;UAAA;QAAA,SACtB,eACJ;UAAQ,SAAS,EAAC,kBAAkB;UAAC,IAAI,EAAC,QAAQ;UAAA,UAAC;QAEnD;UAAA;UAAA;UAAA;QAAA,SAAS;MAAA;QAAA;QAAA;QAAA;MAAA,SACL;IAAA,gBACL;EAEP,CAAC;AAAA;AAAA,GAvEuBhC,iBAAiB;AAAA,KAAjBA,iBAAiB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
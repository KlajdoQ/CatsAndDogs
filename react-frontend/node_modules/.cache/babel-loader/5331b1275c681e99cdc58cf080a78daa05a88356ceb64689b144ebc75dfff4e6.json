{"ast":null,"code":"var _jsxFileName = \"/Users/kqasolli/Desktop/capstone/CatsAndDogs/react-frontend/src/components/content/ChatModal.js\",\n  _s = $RefreshSig$();\n// components/ChatModal.js\n\nimport React, { useState, useEffect } from 'react';\nimport createChatChannel from '../javascript/channels/chat_channel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatModal = _ref => {\n  _s();\n  let {\n    currentUser,\n    author,\n    handleClose\n  } = _ref;\n  const [conversation, setConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [chatChannel, setChatChannel] = useState(null);\n  useEffect(() => {\n    if (!conversation) {\n      // Create or fetch the conversation between the current user and the author\n      fetch('http://localhost:3000/conversations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          sender_id: currentUser.id,\n          receiver_id: author.id\n        })\n      }).then(response => response.json()).then(data => {\n        setConversation(data);\n        const channel = createChatChannel(data.id, handleReceivedMessage);\n        setChatChannel(channel);\n      });\n    }\n  }, [conversation, currentUser, author]);\n  const handleReceivedMessage = message => {\n    setMessages(prevMessages => [...prevMessages, message]);\n  };\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim()) {\n      chatChannel.sendMessage(inputValue, currentUser.id, conversation.id);\n      setInputValue('');\n    }\n  };\n  const renderMessages = () => {\n    return messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: message.user_id === currentUser.id ? 'currentUserMessage' : 'authorMessage',\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    style: {\n      backgroundColor: \"#eee\",\n      position: \"fixed\",\n      bottom: \"0\",\n      right: currentUser.id === author.id ? \"0\" : \"initial\",\n      left: currentUser.id === author.id ? \"initial\" : \"0\"\n    },\n    className: \"section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group mb-0\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"Type message\",\n        \"aria-label\": \"Recipient's username\",\n        \"aria-describedby\": \"button-addon2\",\n        value: messageInput,\n        onChange: e => setMessageInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-warning\",\n        type: \"button\",\n        id: \"button-addon2\",\n        style: {\n          paddingTop: \".55rem\"\n        },\n        onClick: sendMessage,\n        children: \"Send Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatModal, \"mdmVq0X4wchM9PMj0g2brMsL1wI=\");\n_c = ChatModal;\nexport default ChatModal;\nvar _c;\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"names":["React","useState","useEffect","createChatChannel","ChatModal","currentUser","author","handleClose","conversation","setConversation","messages","setMessages","inputValue","setInputValue","chatChannel","setChatChannel","fetch","method","headers","body","JSON","stringify","sender_id","id","receiver_id","then","response","json","data","channel","handleReceivedMessage","message","prevMessages","handleInputChange","event","target","value","handleSendMessage","trim","sendMessage","renderMessages","map","index","user_id","content","backgroundColor","position","bottom","right","left","messageInput","e","setMessageInput","paddingTop"],"sources":["/Users/kqasolli/Desktop/capstone/CatsAndDogs/react-frontend/src/components/content/ChatModal.js"],"sourcesContent":["// components/ChatModal.js\n\nimport React, { useState, useEffect } from 'react';\nimport createChatChannel from '../javascript/channels/chat_channel'\n\n\nconst ChatModal = ({ currentUser, author, handleClose }) => {\n  const [conversation, setConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [chatChannel, setChatChannel] = useState(null);\n\n  useEffect(() => {\n    if (!conversation) {\n      // Create or fetch the conversation between the current user and the author\n      fetch('http://localhost:3000/conversations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          sender_id: currentUser.id,\n          receiver_id: author.id\n        })\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          setConversation(data);\n          const channel = createChatChannel(data.id, handleReceivedMessage);\n          setChatChannel(channel);\n        });\n    }\n  }, [conversation, currentUser, author]);\n\n  const handleReceivedMessage = (message) => {\n    setMessages((prevMessages) => [...prevMessages, message]);\n  };\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim()) {\n      chatChannel.sendMessage(inputValue, currentUser.id, conversation.id);\n      setInputValue('');\n    }\n  };\n\n  const renderMessages = () => {\n    return messages.map((message, index) => (\n      <div key={index} className={message.user_id === currentUser.id ? 'currentUserMessage' : 'authorMessage'}>\n        <p>{message.content}</p>\n      </div>\n    ));\n  };\n\n  return (\n    <section\n      style={{\n        backgroundColor: \"#eee\",\n        position: \"fixed\",\n        bottom: \"0\",\n        right: currentUser.id === author.id ? \"0\" : \"initial\",\n        left: currentUser.id === author.id ? \"initial\" : \"0\",\n      }}\n      className=\"section\"\n    >\n      {/* ... rest of the component */}\n      <div className=\"input-group mb-0\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Type message\"\n          aria-label=\"Recipient's username\"\n          aria-describedby=\"button-addon2\"\n          value={messageInput}\n          onChange={(e) => setMessageInput(e.target.value)}\n        />\n        <button\n          className=\"btn btn-warning\"\n          type=\"button\"\n          id=\"button-addon2\"\n          style={{ paddingTop: \".55rem\" }}\n          onClick={sendMessage}\n        >\n          Send Message\n        </button>\n      </div>\n      {/* ... rest of the component */}\n    </section>\n  );\n};\n\nexport default ChatModal;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,iBAAiB,MAAM,qCAAqC;AAAA;AAGnE,MAAMC,SAAS,GAAG,QAA0C;EAAA;EAAA,IAAzC;IAAEC,WAAW;IAAEC,MAAM;IAAEC;EAAY,CAAC;EACrD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,YAAY,EAAE;MACjB;MACAQ,KAAK,CAAC,qCAAqC,EAAE;QAC3CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,SAAS,EAAEjB,WAAW,CAACkB,EAAE;UACzBC,WAAW,EAAElB,MAAM,CAACiB;QACtB,CAAC;MACH,CAAC,CAAC,CACCE,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;QACdnB,eAAe,CAACmB,IAAI,CAAC;QACrB,MAAMC,OAAO,GAAG1B,iBAAiB,CAACyB,IAAI,CAACL,EAAE,EAAEO,qBAAqB,CAAC;QACjEf,cAAc,CAACc,OAAO,CAAC;MACzB,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACrB,YAAY,EAAEH,WAAW,EAAEC,MAAM,CAAC,CAAC;EAEvC,MAAMwB,qBAAqB,GAAIC,OAAO,IAAK;IACzCpB,WAAW,CAAEqB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,OAAO,CAAC,CAAC;EAC3D,CAAC;EAED,MAAME,iBAAiB,GAAIC,KAAK,IAAK;IACnCrB,aAAa,CAACqB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAM;IAC9B,IAAIzB,UAAU,CAAC0B,IAAI,EAAE,EAAE;MACrBxB,WAAW,CAACyB,WAAW,CAAC3B,UAAU,EAAEP,WAAW,CAACkB,EAAE,EAAEf,YAAY,CAACe,EAAE,CAAC;MACpEV,aAAa,CAAC,EAAE,CAAC;IACnB;EACF,CAAC;EAED,MAAM2B,cAAc,GAAG,MAAM;IAC3B,OAAO9B,QAAQ,CAAC+B,GAAG,CAAC,CAACV,OAAO,EAAEW,KAAK,kBACjC;MAAiB,SAAS,EAAEX,OAAO,CAACY,OAAO,KAAKtC,WAAW,CAACkB,EAAE,GAAG,oBAAoB,GAAG,eAAgB;MAAA,uBACtG;QAAA,UAAIQ,OAAO,CAACa;MAAO;QAAA;QAAA;QAAA;MAAA;IAAK,GADhBF,KAAK;MAAA;MAAA;MAAA;IAAA,QAGhB,CAAC;EACJ,CAAC;EAED,oBACE;IACE,KAAK,EAAE;MACLG,eAAe,EAAE,MAAM;MACvBC,QAAQ,EAAE,OAAO;MACjBC,MAAM,EAAE,GAAG;MACXC,KAAK,EAAE3C,WAAW,CAACkB,EAAE,KAAKjB,MAAM,CAACiB,EAAE,GAAG,GAAG,GAAG,SAAS;MACrD0B,IAAI,EAAE5C,WAAW,CAACkB,EAAE,KAAKjB,MAAM,CAACiB,EAAE,GAAG,SAAS,GAAG;IACnD,CAAE;IACF,SAAS,EAAC,SAAS;IAAA,uBAGnB;MAAK,SAAS,EAAC,kBAAkB;MAAA,wBAC/B;QACE,IAAI,EAAC,MAAM;QACX,SAAS,EAAC,cAAc;QACxB,WAAW,EAAC,cAAc;QAC1B,cAAW,sBAAsB;QACjC,oBAAiB,eAAe;QAChC,KAAK,EAAE2B,YAAa;QACpB,QAAQ,EAAGC,CAAC,IAAKC,eAAe,CAACD,CAAC,CAAChB,MAAM,CAACC,KAAK;MAAE;QAAA;QAAA;QAAA;MAAA,QACjD,eACF;QACE,SAAS,EAAC,iBAAiB;QAC3B,IAAI,EAAC,QAAQ;QACb,EAAE,EAAC,eAAe;QAClB,KAAK,EAAE;UAAEiB,UAAU,EAAE;QAAS,CAAE;QAChC,OAAO,EAAEd,WAAY;QAAA,UACtB;MAED;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA;EACL;IAAA;IAAA;IAAA;EAAA,QAEE;AAEd,CAAC;AAAC,GAvFInC,SAAS;AAAA,KAATA,SAAS;AAyFf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
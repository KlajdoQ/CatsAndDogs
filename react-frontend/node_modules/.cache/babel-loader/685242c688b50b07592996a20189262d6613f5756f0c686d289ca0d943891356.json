{"ast":null,"code":"var _jsxFileName = \"/Users/kqasolli/Desktop/capstone/CatsAndDogs/react-frontend/src/components/content/AddComment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CommentAndReplyForm from \"./CommentAndReplyForm\";\nimport { useContext } from 'react';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddComment(_ref) {\n  _s();\n  let {\n    newMessage,\n    setNewMessage,\n    animal,\n    setAnimals,\n    setUser,\n    handleClick\n  } = _ref;\n  const [newComment, setnewComment] = useState(\"\");\n  const [showComment, setshowComment] = useState(false);\n  const [likeComment, setLikeComment] = useState(false);\n  const [showReply, setShowReply] = useState(animal.comments ? Array(animal.comments.length).fill(false) : []);\n  const [newReply, setNewReply] = useState(animal.comments ? Array(animal.comments.length).fill(\"\") : []);\n  const {\n    user\n  } = useContext(UserContext);\n  function handleCommentSubmit(event) {\n    event.preventDefault();\n    if (newComment) {\n      const requestBody = {\n        comment: {\n          comment: newComment,\n          user_id: user.id\n        }\n      };\n      fetch(`http://localhost:3000/animals/${animal.id}/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify(requestBody)\n      }).then(response => response.json()).then(newComment => {\n        setAnimals(prevAnimals => prevAnimals.map(currentAnimal => {\n          if (currentAnimal.id === animal.id) {\n            return {\n              ...currentAnimal,\n              comments: [...(currentAnimal.comments || []), newComment]\n            };\n          } else {\n            return currentAnimal;\n          }\n        }));\n        setnewComment(\"\");\n        setshowComment(true);\n      }).catch(error => console.error(error));\n    }\n  }\n  function handleCommentChange(event) {\n    setnewComment(event.target.value);\n  }\n\n  // function to show the comments when the comment is clicked\n  function showCommentReplies(commentIndex) {\n    setShowReply(prev => {\n      let isCommentShown = {\n        ...prev\n      };\n      isCommentShown[commentIndex] = !isCommentShown[commentIndex];\n      return isCommentShown;\n    });\n  }\n  function likeComments(commentIndex) {\n    setAnimals(prevAnimals => {\n      const updatedAnimals = prevAnimals.map(currentAnimal => {\n        if (currentAnimal.id === animal.id) {\n          const updatedComments = currentAnimal.comments.map((comment, index) => {\n            if (index === commentIndex) {\n              const updatedLikes = comment.likes + (comment.liked ? -1 : 1);\n              return {\n                ...comment,\n                likes: updatedLikes,\n                liked: !comment.liked\n              };\n            }\n            return comment;\n          });\n          return {\n            ...currentAnimal,\n            comments: updatedComments\n          };\n        }\n        return currentAnimal;\n      });\n      return updatedAnimals;\n    });\n  }\n\n  //function to assign the state change to the reply\n  function handleReplyChange(e) {\n    setNewReply(e.target.value);\n  }\n\n  // update the reply state in the parent component with a new reply and also update the backend\n  function handleReplySubmit(e, commentIndex) {\n    e.preventDefault();\n    if (newReply) {\n      fetch(`http://localhost:3000/animals/${animal.id}/comments/${animal.comments[commentIndex].id}/replies`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          reply: {\n            reply: newReply\n          }\n        })\n      }).then(response => response.json()).then(newReply => {\n        setAnimals(prevAnimals => prevAnimals.map(currentAnimal => {\n          if (currentAnimal.id === animal.id) {\n            return {\n              ...currentAnimal,\n              comments: currentAnimal.comments.map((currentComment, i) => i === commentIndex ? {\n                ...currentComment,\n                replies: [...currentComment.replies, newReply]\n              } : currentComment)\n            };\n          } else {\n            return currentAnimal;\n          }\n        }));\n        setNewReply(\"\");\n        setShowReply(prev => {\n          let isCommentShown = {\n            ...prev\n          };\n          isCommentShown[commentIndex] = false;\n          return isCommentShown;\n        });\n      }).catch(error => console.error(error));\n    }\n  }\n  function handleCommentDelete(commentIndex) {\n    const commentId = animal.comments[commentIndex].id;\n    fetch(`http://localhost:3000/animals/${animal.id}/comments/${commentId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(() => {\n      setAnimals(prevAnimals => prevAnimals.map(currentAnimal => {\n        if (currentAnimal.id === animal.id) {\n          return {\n            ...currentAnimal,\n            comments: currentAnimal.comments.filter(comment => comment.id !== commentId)\n          };\n        } else {\n          return currentAnimal;\n        }\n      }));\n    }).catch(error => console.error(error));\n  }\n  return /*#__PURE__*/_jsxDEV(CommentAndReplyForm, {\n    handleCommentSubmit: handleCommentSubmit,\n    animal: animal,\n    setAnimals: setAnimals,\n    likeComments: likeComments,\n    likeComment: likeComment,\n    showCommentReplies: showCommentReplies,\n    showReply: showReply,\n    newReply: newReply,\n    handleReplyChange: handleReplyChange,\n    handleCommentChange: handleCommentChange,\n    handleReplySubmit: handleReplySubmit,\n    showComment: showComment,\n    handleCommentDelete: handleCommentDelete,\n    user_id: user.id,\n    setUser: setUser,\n    newMessage: newMessage,\n    setNewMessage: setNewMessage,\n    handleClick: handleClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n_s(AddComment, \"yEZw0F3N79R46QDwMcebYlQUpAQ=\");\n_c = AddComment;\nvar _c;\n$RefreshReg$(_c, \"AddComment\");","map":{"version":3,"names":["React","useState","CommentAndReplyForm","useContext","UserContext","AddComment","newMessage","setNewMessage","animal","setAnimals","setUser","handleClick","newComment","setnewComment","showComment","setshowComment","likeComment","setLikeComment","showReply","setShowReply","comments","Array","length","fill","newReply","setNewReply","user","handleCommentSubmit","event","preventDefault","requestBody","comment","user_id","id","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","prevAnimals","map","currentAnimal","catch","error","console","handleCommentChange","target","value","showCommentReplies","commentIndex","prev","isCommentShown","likeComments","updatedAnimals","updatedComments","index","updatedLikes","likes","liked","handleReplyChange","e","handleReplySubmit","reply","currentComment","i","replies","handleCommentDelete","commentId","filter"],"sources":["/Users/kqasolli/Desktop/capstone/CatsAndDogs/react-frontend/src/components/content/AddComment.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport CommentAndReplyForm from \"./CommentAndReplyForm\";\nimport { useContext } from 'react';\nimport { UserContext } from '../contexts/UserContext';\n\nexport default function AddComment({ newMessage, setNewMessage, animal, setAnimals , setUser, handleClick}) {\n\n  const [newComment, setnewComment] = useState(\"\");\n  const [showComment, setshowComment] = useState(false);\n  const [likeComment, setLikeComment] = useState(false);\n  const [showReply, setShowReply] = useState(animal.comments ? Array(animal.comments.length).fill(false) : []);\n  const [newReply, setNewReply] = useState(animal.comments ? Array(animal.comments.length).fill(\"\") : []);\n  const { user} = useContext(UserContext)\n\n  \n  function handleCommentSubmit(event) {\n    event.preventDefault();\n    if (newComment) {\n      const requestBody = { comment: { comment: newComment, user_id: user.id } };\n      fetch(`http://localhost:3000/animals/${animal.id}/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify(requestBody),\n      })\n        .then((response) => response.json())\n        .then((newComment) => {\n          setAnimals((prevAnimals) =>\n            prevAnimals.map((currentAnimal) => {\n              if (currentAnimal.id === animal.id) {\n                return {\n                  ...currentAnimal,\n                  comments: [...(currentAnimal.comments || []), newComment],\n                };\n              } else {\n                return currentAnimal;\n              }\n            })\n          );\n          setnewComment(\"\");\n          setshowComment(true);\n        })\n        .catch((error) => console.error(error));\n    }\n  }\n  \n\n  function handleCommentChange(event) {\n    setnewComment(event.target.value);\n  }\n\n\n  \n  // function to show the comments when the comment is clicked\n  function showCommentReplies(commentIndex) {\n    setShowReply((prev) => {\n      let isCommentShown = { ...prev };\n      isCommentShown[commentIndex] = !isCommentShown[commentIndex];\n      return isCommentShown;\n    });\n  }\n\n\nfunction likeComments(commentIndex) {\n  setAnimals((prevAnimals) => {\n    const updatedAnimals = prevAnimals.map((currentAnimal) => {\n      if (currentAnimal.id === animal.id) {\n        const updatedComments = currentAnimal.comments.map((comment, index) => {\n          if (index === commentIndex) {\n            const updatedLikes = comment.likes + (comment.liked ? -1 : 1);\n            return { ...comment, likes: updatedLikes, liked: !comment.liked };\n          }\n          return comment;\n        });\n        return { ...currentAnimal, comments: updatedComments };\n      }\n      return currentAnimal;\n    });\n    return updatedAnimals;\n  });\n}\n\n  \n  \n  //function to assign the state change to the reply\n  function handleReplyChange(e) {\n    setNewReply(e.target.value);\n  }\n\n  // update the reply state in the parent component with a new reply and also update the backend\n  function handleReplySubmit(e, commentIndex) {\n    e.preventDefault();\n    if (newReply) {\n      fetch(`http://localhost:3000/animals/${animal.id}/comments/${animal.comments[commentIndex].id}/replies`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify({ \n          reply: { reply: newReply } \n        }),\n      })\n        .then((response) => response.json())\n        .then((newReply) => {\n          setAnimals((prevAnimals) =>\n            prevAnimals.map((currentAnimal) => {\n              if (currentAnimal.id === animal.id) {\n                return {\n                  ...currentAnimal,\n                  comments: currentAnimal.comments.map((currentComment, i) =>\n                    i === commentIndex ? { ...currentComment, replies: [...currentComment.replies, newReply] } : currentComment\n                  ),\n                };\n              } else {\n                return currentAnimal;\n              }\n            })\n          );\n          setNewReply(\"\");\n          setShowReply((prev) => {\n            let isCommentShown = { ...prev };\n            isCommentShown[commentIndex] = false;\n            return isCommentShown;\n          });\n        })\n        .catch((error) => console.error(error));\n    }\n  }\n  \n  function handleCommentDelete(commentIndex) {\n    const commentId = animal.comments[commentIndex].id;\n    fetch(`http://localhost:3000/animals/${animal.id}/comments/${commentId}`, {\n\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then(() => {\n        setAnimals((prevAnimals) =>\n          prevAnimals.map((currentAnimal) => {\n            if (currentAnimal.id === animal.id) {\n              return {\n                ...currentAnimal,\n                comments: currentAnimal.comments.filter(\n                  (comment) => comment.id !== commentId\n                ),\n              };\n            } else {\n              return currentAnimal;\n            }\n          })\n        );\n      })\n      .catch((error) => console.error(error));\n  }\n  \n  return (\n    <CommentAndReplyForm\n      handleCommentSubmit={handleCommentSubmit}\n      animal={animal}\n      setAnimals={setAnimals}\n      likeComments={likeComments}\n      likeComment={likeComment}\n      showCommentReplies={showCommentReplies}\n      showReply={showReply}\n      newReply={newReply}\n      handleReplyChange={handleReplyChange}\n      handleCommentChange={handleCommentChange}\n      handleReplySubmit={handleReplySubmit}\n      showComment={showComment}\n      handleCommentDelete={handleCommentDelete}\n      user_id={user.id}\n      setUser={setUser}\n      newMessage={newMessage}\n      setNewMessage={setNewMessage}\n      handleClick={handleClick}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
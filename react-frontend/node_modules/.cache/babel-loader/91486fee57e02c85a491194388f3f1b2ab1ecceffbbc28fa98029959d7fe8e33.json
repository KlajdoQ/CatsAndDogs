{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createConsumer } from '@rails/actioncable';\nimport { useState, useEffect } from 'react';\nconst getWebSocketURL = () => {\n  return 'ws://localhost:3000/cable';\n};\nconst consumer = createConsumer(getWebSocketURL());\nconst createChatChannel = (receivedMessageCallback, user_id, receiver_id) => {\n  _s();\n  const [channel, setChannel] = useState(null);\n  const [subscribed, setSubscribed] = useState(false);\n  useEffect(() => {\n    if (consumer && user_id && receiver_id && !subscribed) {\n      const newChannel = consumer.subscriptions.create({\n        channel: 'ChatChannel',\n        user_id: user_id,\n        receiver_id: receiver_id\n      }, {\n        connected() {\n          console.log('Connected to chat channel');\n        },\n        disconnected() {\n          console.log('Disconnected from chat channel');\n        },\n        received(data) {\n          console.log(\"Received data:\", data);\n          if (data.message && data.message.trim() !== \"\") {\n            receivedMessageCallback({\n              content: data.message.trim(),\n              user_id: data.user_id,\n              receiver_id: data.receiver_id\n            });\n          } else {\n            console.warn(\"Received empty message or message is not defined\");\n          }\n        },\n        send_message(content, user_id, receiver_id) {\n          this.perform('send_message', {\n            content,\n            user_id,\n            receiver_id\n          });\n        }\n      });\n      setChannel(newChannel);\n      setSubscribed(true);\n    }\n    return () => {\n      if (channel) {\n        consumer.subscriptions.remove(channel);\n      }\n    };\n  }, [consumer, user_id, receiver_id, subscribed, receivedMessageCallback, channel]);\n  return {\n    sendMessage: (content, user_id, receiver_id) => channel.send_message(content, user_id, receiver_id)\n  };\n};\n_s(createChatChannel, \"3XVOjmL52TqZy+OCZgEBCJFdmSM=\");\nexport default createChatChannel;","map":{"version":3,"names":["createConsumer","useState","useEffect","getWebSocketURL","consumer","createChatChannel","receivedMessageCallback","user_id","receiver_id","channel","setChannel","subscribed","setSubscribed","newChannel","subscriptions","create","connected","console","log","disconnected","received","data","message","trim","content","warn","send_message","perform","remove","sendMessage"],"sources":["/Users/kqasolli/Desktop/capstone/CatsAndDogs/react-frontend/src/components/javascript/channels/chat_channel.js"],"sourcesContent":["import { createConsumer } from '@rails/actioncable';\nimport { useState, useEffect } from 'react';\n\nconst getWebSocketURL = () => {\n  return 'ws://localhost:3000/cable';\n};\n\nconst consumer = createConsumer(getWebSocketURL());\n\nconst createChatChannel = (receivedMessageCallback, user_id, receiver_id) => {\n  const [channel, setChannel] = useState(null);\n  const [subscribed, setSubscribed] = useState(false);\n\n  useEffect(() => {\n    if (consumer && user_id && receiver_id && !subscribed) {\n      const newChannel = consumer.subscriptions.create(\n        {\n          channel: 'ChatChannel',\n          user_id: user_id,\n          receiver_id: receiver_id\n        },\n        {\n          connected() {\n            console.log('Connected to chat channel');\n          },\n\n          disconnected() {\n            console.log('Disconnected from chat channel');\n          },\n\n          received(data) {\n            console.log(\"Received data:\", data);\n            if (data.message && data.message.trim() !== \"\") {\n              receivedMessageCallback({\n                content: data.message.trim(),\n                user_id: data.user_id,\n                receiver_id: data.receiver_id,\n              });\n            } else {\n              console.warn(\"Received empty message or message is not defined\");\n            }\n          },\n        \n          send_message(content, user_id, receiver_id) {\n            this.perform('send_message', { content, user_id, receiver_id });\n          },\n        }\n      );\n      setChannel(newChannel);\n      setSubscribed(true);\n    }\n\n    return () => {\n      if (channel) {\n        consumer.subscriptions.remove(channel);\n      }\n    }\n  }, [consumer, user_id, receiver_id, subscribed, receivedMessageCallback, channel]);\n\n  return {\n    sendMessage: (content, user_id, receiver_id) => channel.send_message(content, user_id, receiver_id)\n  };\n};\n\nexport default createChatChannel;\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,oBAAoB;AACnD,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,eAAe,GAAG,MAAM;EAC5B,OAAO,2BAA2B;AACpC,CAAC;AAED,MAAMC,QAAQ,GAAGJ,cAAc,CAACG,eAAe,EAAE,CAAC;AAElD,MAAME,iBAAiB,GAAG,CAACC,uBAAuB,EAAEC,OAAO,EAAEC,WAAW,KAAK;EAAA;EAC3E,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,IAAIE,QAAQ,IAAIG,OAAO,IAAIC,WAAW,IAAI,CAACG,UAAU,EAAE;MACrD,MAAME,UAAU,GAAGT,QAAQ,CAACU,aAAa,CAACC,MAAM,CAC9C;QACEN,OAAO,EAAE,aAAa;QACtBF,OAAO,EAAEA,OAAO;QAChBC,WAAW,EAAEA;MACf,CAAC,EACD;QACEQ,SAAS,GAAG;UACVC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;QAC1C,CAAC;QAEDC,YAAY,GAAG;UACbF,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC/C,CAAC;QAEDE,QAAQ,CAACC,IAAI,EAAE;UACbJ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEG,IAAI,CAAC;UACnC,IAAIA,IAAI,CAACC,OAAO,IAAID,IAAI,CAACC,OAAO,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;YAC9CjB,uBAAuB,CAAC;cACtBkB,OAAO,EAAEH,IAAI,CAACC,OAAO,CAACC,IAAI,EAAE;cAC5BhB,OAAO,EAAEc,IAAI,CAACd,OAAO;cACrBC,WAAW,EAAEa,IAAI,CAACb;YACpB,CAAC,CAAC;UACJ,CAAC,MAAM;YACLS,OAAO,CAACQ,IAAI,CAAC,kDAAkD,CAAC;UAClE;QACF,CAAC;QAEDC,YAAY,CAACF,OAAO,EAAEjB,OAAO,EAAEC,WAAW,EAAE;UAC1C,IAAI,CAACmB,OAAO,CAAC,cAAc,EAAE;YAAEH,OAAO;YAAEjB,OAAO;YAAEC;UAAY,CAAC,CAAC;QACjE;MACF,CAAC,CACF;MACDE,UAAU,CAACG,UAAU,CAAC;MACtBD,aAAa,CAAC,IAAI,CAAC;IACrB;IAEA,OAAO,MAAM;MACX,IAAIH,OAAO,EAAE;QACXL,QAAQ,CAACU,aAAa,CAACc,MAAM,CAACnB,OAAO,CAAC;MACxC;IACF,CAAC;EACH,CAAC,EAAE,CAACL,QAAQ,EAAEG,OAAO,EAAEC,WAAW,EAAEG,UAAU,EAAEL,uBAAuB,EAAEG,OAAO,CAAC,CAAC;EAElF,OAAO;IACLoB,WAAW,EAAE,CAACL,OAAO,EAAEjB,OAAO,EAAEC,WAAW,KAAKC,OAAO,CAACiB,YAAY,CAACF,OAAO,EAAEjB,OAAO,EAAEC,WAAW;EACpG,CAAC;AACH,CAAC;AAAC,GArDIH,iBAAiB;AAuDvB,eAAeA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
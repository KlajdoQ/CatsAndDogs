{"ast":null,"code":"var _jsxFileName = \"/Users/kqasolli/Desktop/CatsAndDogs/react-frontend/src/components/content/AddComment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CommentAndReplyForm from \"./CommentAndReplyForm\";\nimport { useContext } from 'react';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddComment(_ref) {\n  _s();\n  let {\n    animal,\n    setAnimals\n  } = _ref;\n  // state to keep track of the new comment being added\n  const [newComment, setnewComment] = useState(\"\");\n  // state to determine if the comment form is displayed\n  const [showComment, setshowComment] = useState(false);\n  // state to keep track of the like status of a comment\n  const [likeComment, setLikeComment] = useState([]);\n\n  // update the animal state in the parent component with a new comment and also update the backend\n  const [showReply, setShowReply] = useState(animal.comments ? Array(animal.comments.length).fill(false) : []);\n  const [newReply, setNewReply] = useState(animal.comments ? Array(animal.comments.length).fill(\"\") : []);\n\n  // update the animal state in the parent component with a new comment and also update the backend\n  function handleCommentSubmit(event) {\n    event.preventDefault();\n    if (newComment) {\n      const requestBody = {\n        comment: {\n          comment: newComment\n        }\n      };\n      fetch(`http://localhost:3000/animals/${animal.id}/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify(requestBody)\n      }).then(response => response.json()).then(newComment => {\n        setAnimals(prevAnimals => prevAnimals.map(currentAnimal => {\n          if (currentAnimal.id === animal.id) {\n            return {\n              ...currentAnimal,\n              comments: [...(currentAnimal.comments || []), newComment]\n            };\n          } else {\n            return currentAnimal;\n          }\n        }));\n        setnewComment(\"\");\n        setshowComment(true);\n      }).catch(error => console.error(error));\n    }\n  }\n\n  // function to handle the change in the comment input\n  function handleCommentChange(event) {\n    setnewComment(event.target.value);\n  }\n\n  // function to like a comment and update the json file\n\n  // function to show the comments when the comment is clicked\n  function showCommentReplies(commentIndex) {\n    setShowReply(prev => {\n      let isCommentShown = {\n        ...prev\n      };\n      isCommentShown[commentIndex] = !isCommentShown[commentIndex];\n      return isCommentShown;\n    });\n  }\n  function likeComments(commentIndex) {\n    fetch(`http://localhost:3000/animals/${animal.id}/update_comment_likes?comment_id=${animal.comments[commentIndex].id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(response => response.json()).then(updatedComment => {\n      setLikeComment(prevLikes => {\n        const updatedLikes = [...prevLikes];\n        updatedLikes[commentIndex] = true;\n        return updatedLikes;\n      });\n    }).catch(error => console.error(error));\n  }\n\n  //function to assign the state change to the reply\n  function handleReplyChange(e) {\n    setNewReply(e.target.value);\n  }\n\n  // update the reply state in the parent component with a new reply and also update the backend\n  function handleReplySubmit(e, commentIndex) {\n    e.preventDefault();\n    if (newReply) {\n      fetch(`http://localhost:3000/animals/${animal.id}/comments/${animal.comments[commentIndex].id}/replies`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          reply: {\n            reply: newReply\n          }\n        })\n      }).then(response => response.json()).then(newReply => {\n        setAnimals(prevAnimals => prevAnimals.map(currentAnimal => {\n          if (currentAnimal.id === animal.id) {\n            return {\n              ...currentAnimal,\n              comments: currentAnimal.comments.map((currentComment, i) => i === commentIndex ? {\n                ...currentComment,\n                replies: [...currentComment.replies, newReply]\n              } : currentComment)\n            };\n          } else {\n            return currentAnimal;\n          }\n        }));\n        setNewReply(\"\");\n        setShowReply(prev => {\n          let isCommentShown = {\n            ...prev\n          };\n          isCommentShown[commentIndex] = false;\n          return isCommentShown;\n        });\n      }).catch(error => console.error(error));\n    }\n  }\n  function handleCommentDelete(commentIndex) {\n    const commentId = animal.comments[commentIndex].id;\n    fetch(`http://localhost:3000/animals/${animal.id}/comments/${commentId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(() => {\n      setAnimals(prevAnimals => prevAnimals.map(currentAnimal => {\n        if (currentAnimal.id === animal.id) {\n          return {\n            ...currentAnimal,\n            comments: currentAnimal.comments.filter(comment => comment.id !== commentId)\n          };\n        } else {\n          return currentAnimal;\n        }\n      }));\n    }).catch(error => console.error(error));\n  }\n  return /*#__PURE__*/_jsxDEV(CommentAndReplyForm, {\n    handleCommentSubmit: handleCommentSubmit,\n    animal: animal,\n    setAnimals: setAnimals,\n    likeComments: likeComments,\n    likeComment: likeComment,\n    showCommentReplies: showCommentReplies,\n    showReply: showReply,\n    newReply: newReply,\n    handleReplyChange: handleReplyChange,\n    newComment: newComment,\n    handleCommentChange: handleCommentChange,\n    handleReplySubmit: handleReplySubmit,\n    showComment: showComment,\n    handleCommentDelete: handleCommentDelete\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n_s(AddComment, \"R2WVInCXJBWLDHhp/jhcUdsckI0=\");\n_c = AddComment;\nvar _c;\n$RefreshReg$(_c, \"AddComment\");","map":{"version":3,"names":["React","useState","CommentAndReplyForm","useContext","UserContext","AddComment","animal","setAnimals","newComment","setnewComment","showComment","setshowComment","likeComment","setLikeComment","showReply","setShowReply","comments","Array","length","fill","newReply","setNewReply","handleCommentSubmit","event","preventDefault","requestBody","comment","fetch","id","method","headers","Accept","body","JSON","stringify","then","response","json","prevAnimals","map","currentAnimal","catch","error","console","handleCommentChange","target","value","showCommentReplies","commentIndex","prev","isCommentShown","likeComments","updatedComment","prevLikes","updatedLikes","handleReplyChange","e","handleReplySubmit","reply","currentComment","i","replies","handleCommentDelete","commentId","filter"],"sources":["/Users/kqasolli/Desktop/CatsAndDogs/react-frontend/src/components/content/AddComment.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport CommentAndReplyForm from \"./CommentAndReplyForm\";\nimport { useContext } from 'react';\nimport { UserContext } from '../contexts/UserContext';\n\nexport default function AddComment({ animal, setAnimals }) {\n  // state to keep track of the new comment being added\n  const [newComment, setnewComment] = useState(\"\");\n  // state to determine if the comment form is displayed\n  const [showComment, setshowComment] = useState(false);\n  // state to keep track of the like status of a comment\n  const [likeComment, setLikeComment] = useState([]);\n\n  // update the animal state in the parent component with a new comment and also update the backend\n  const [showReply, setShowReply] = useState(animal.comments ? Array(animal.comments.length).fill(false) : []);\n  const [newReply, setNewReply] = useState(animal.comments ? Array(animal.comments.length).fill(\"\") : []);\n\n  \n\n  // update the animal state in the parent component with a new comment and also update the backend\n  function handleCommentSubmit(event) {\n    event.preventDefault();\n    if (newComment) {\n      const requestBody = { comment: { comment: newComment } };\n      fetch(`http://localhost:3000/animals/${animal.id}/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify(requestBody),\n      })\n        .then((response) => response.json())\n        .then((newComment) => {\n          setAnimals((prevAnimals) =>\n            prevAnimals.map((currentAnimal) => {\n              if (currentAnimal.id === animal.id) {\n                return {\n                  ...currentAnimal,\n                  comments: [...(currentAnimal.comments || []), newComment],\n                };\n              } else {\n                return currentAnimal;\n              }\n            })\n          );\n          setnewComment(\"\");\n          setshowComment(true);\n        })\n        .catch((error) => console.error(error));\n    }\n  }\n\n  // function to handle the change in the comment input\n  function handleCommentChange(event) {\n    setnewComment(event.target.value);\n  }\n\n  // function to like a comment and update the json file\n  \n  // function to show the comments when the comment is clicked\n  function showCommentReplies(commentIndex) {\n    setShowReply((prev) => {\n      let isCommentShown = { ...prev };\n      isCommentShown[commentIndex] = !isCommentShown[commentIndex];\n      return isCommentShown;\n    });\n  }\n  function likeComments(commentIndex) {\n    fetch(`http://localhost:3000/animals/${animal.id}/update_comment_likes?comment_id=${animal.comments[commentIndex].id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((updatedComment) => {\n        setLikeComment((prevLikes) => {\n          const updatedLikes = [...prevLikes];\n          updatedLikes[commentIndex] = true;\n          return updatedLikes;\n        });\n      })\n      .catch((error) => console.error(error));\n  }\n  \n  //function to assign the state change to the reply\n  function handleReplyChange(e) {\n    setNewReply(e.target.value);\n  }\n\n  // update the reply state in the parent component with a new reply and also update the backend\n  function handleReplySubmit(e, commentIndex) {\n    e.preventDefault();\n    if (newReply) {\n      fetch(`http://localhost:3000/animals/${animal.id}/comments/${animal.comments[commentIndex].id}/replies`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify({ reply: { reply: newReply } }),\n      })\n        .then((response) => response.json())\n        .then((newReply) => {\n          setAnimals((prevAnimals) =>\n            prevAnimals.map((currentAnimal) => {\n              if (currentAnimal.id === animal.id) {\n                return {\n                  ...currentAnimal,\n                  comments: currentAnimal.comments.map((currentComment, i) =>\n                    i === commentIndex ? { ...currentComment, replies: [...currentComment.replies, newReply] } : currentComment\n                  ),\n                };\n              } else {\n                return currentAnimal;\n              }\n            })\n          );\n          setNewReply(\"\");\n          setShowReply((prev) => {\n            let isCommentShown = { ...prev };\n            isCommentShown[commentIndex] = false;\n            return isCommentShown;\n          });\n        })\n        .catch((error) => console.error(error));\n    }\n  }\n  \n  function handleCommentDelete(commentIndex) {\n    const commentId = animal.comments[commentIndex].id;\n    fetch(`http://localhost:3000/animals/${animal.id}/comments/${commentId}`, {\n\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then(() => {\n        setAnimals((prevAnimals) =>\n          prevAnimals.map((currentAnimal) => {\n            if (currentAnimal.id === animal.id) {\n              return {\n                ...currentAnimal,\n                comments: currentAnimal.comments.filter(\n                  (comment) => comment.id !== commentId\n                ),\n              };\n            } else {\n              return currentAnimal;\n            }\n          })\n        );\n      })\n      .catch((error) => console.error(error));\n  }\n  \n  return (\n    <CommentAndReplyForm\n      handleCommentSubmit={handleCommentSubmit}\n      animal={animal}\n      setAnimals={setAnimals}\n      likeComments={likeComments}\n      likeComment={likeComment}\n      showCommentReplies={showCommentReplies}\n      showReply={showReply}\n      newReply={newReply}\n      handleReplyChange={handleReplyChange}\n      newComment={newComment}\n      handleCommentChange={handleCommentChange}\n      handleReplySubmit={handleReplySubmit}\n      showComment={showComment}\n      handleCommentDelete={handleCommentDelete}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
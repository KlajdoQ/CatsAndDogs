{"ast":null,"code":"var _jsxFileName = \"/Users/kqasolli/Desktop/Cats and Dogs copy/react-frontend/src/components/content/AddComment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CommentAndReplyForm from \"./CommentAndReplyForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddComment(_ref) {\n  _s();\n  let {\n    animal,\n    setAnimals\n  } = _ref;\n  // state to keep track of the new comment being added\n  const [newComment, setnewComment] = useState(\"\");\n  // state to determine if the comment form is displayed\n  const [showComment, setshowComment] = useState(false);\n  // state to keep track of the like status of a comment\n  const [likeComment, setLikeComment] = useState({});\n  // state to determine if a comment has been liked\n  const [isLikeClicked, setIsLikeClicked] = useState(false);\n  // state to keep track of the replies to a comment\n  const [showReply, setShowReply] = useState({});\n  const [newReply, setNewReply] = useState(\"\");\n\n  // update the animal state in the parent component with a new comment and also update the backend\n\n  // function to handle the change in the comment input\n  function handleCommentChange(event) {\n    setnewComment(event.target.value);\n  }\n\n  // function to submit the comment\n  // function handleCommentSubmit(e) {\n  //   e.preventDefault();\n  //   if (newComment && !isLikeClicked) {\n  //     likeComments();\n  //     setnewComment(\"\");\n  //     updateAnimals();\n  //   }\n  //   setIsLikeClicked(false);\n  //   //setnewComment(\"\");\n  //   setshowComment(true);\n  // }\n\n  // function to like a comment and update the json file\n  function likeComments(index) {\n    setLikeComment(prev => {\n      let newLikeComment = {\n        ...prev\n      };\n      newLikeComment[index] = !newLikeComment[index];\n      return newLikeComment;\n    });\n    // fetch(`http://localhost:3000/animals/${animal.id}`, {\n    //   method: \"PATCH\",\n    //   headers: {\n    //     \"content-type\": \"application/json\",\n    //     accept: \"application/json\",\n    //   },\n    //   body: JSON.stringify({\n    //     comments: animal.comments.map((comment, i) =>\n    //       i === index ? { ...comment, likes: comment.likes + 1 } : comment\n    //     ),\n    //   }),\n    // })\n    //   .then((response) => response.json())\n    //   .then((updatedAnimals) => {\n    //     setAnimals((prevAnimals) =>\n    //       prevAnimals.map((currentAnimals) => {\n    //         if (currentAnimals.id === updatedAnimals.id) {\n    //           return updatedAnimals;\n    //         } else {\n    //           return currentAnimals;\n    //         }\n    //       })\n    //     );\n    //   });\n  }\n\n  // function to show the comments when the comment is clicked\n  function showCommentReplies(commentIndex) {\n    setShowReply(prev => {\n      let isCommentShown = {\n        ...prev\n      };\n      isCommentShown[commentIndex] = !isCommentShown[commentIndex];\n      return isCommentShown;\n    });\n  }\n\n  //function to assign the state change to the reply\n  function handleReplyChange(e) {\n    setNewReply(e.target.value);\n  }\n\n  // update the reply state in the parent component with a new reply and also update the backend\n  function handleReplySubmit(e, commentIndex) {\n    e.preventDefault();\n    fetch(`http://localhost:3000/animals/${animal.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        comments: animal.comments.map((comment, i) => {\n          if (i === commentIndex) {\n            return {\n              ...comment,\n              replies: [...comment.replies, {\n                reply: newReply\n              }]\n            };\n          }\n          return comment;\n        })\n      })\n    }).then(response => response.json()).then(updatedAnimals => {\n      setAnimals(prevAnimals => prevAnimals.map(currentAnimals => {\n        if (currentAnimals.id === updatedAnimals.id) {\n          return updatedAnimals;\n        } else {\n          return currentAnimals;\n        }\n      }));\n    });\n    setNewReply(\"\");\n    setShowReply({});\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleCommentSubmit,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        type: \"text\",\n        value: newComment,\n        onChange: handleCommentChange,\n        placeholder: \"Write a comment...\",\n        className: \"type-comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostCommentBtn, {\n        type: \"submit\",\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this)\n  // <CommentAndReplyForm\n  //   handleCommentSubmit={handleCommentSubmit}\n  //   animal={animal}\n  //   setAnimals={setAnimals}\n  //   likeComments={likeComments}\n  //   likeComment={likeComment}\n  //   showCommentReplies={showCommentReplies}\n  //   showReply={showReply}\n  //   newReply={newReply}\n  //   handleReplyChange={handleReplyChange}\n  //   newComment={newComment}\n  //   handleCommentChange={handleCommentChange}\n  //   handleReplySubmit={handleReplySubmit}\n  //   showComment={showComment}\n  // />\n  ;\n}\n_s(AddComment, \"hzWHYMYV4dw+wGVkOxLpFWnj1ec=\");\n_c = AddComment;\nvar _c;\n$RefreshReg$(_c, \"AddComment\");","map":{"version":3,"names":["React","useState","CommentAndReplyForm","AddComment","animal","setAnimals","newComment","setnewComment","showComment","setshowComment","likeComment","setLikeComment","isLikeClicked","setIsLikeClicked","showReply","setShowReply","newReply","setNewReply","handleCommentChange","event","target","value","likeComments","index","prev","newLikeComment","showCommentReplies","commentIndex","isCommentShown","handleReplyChange","e","handleReplySubmit","preventDefault","fetch","id","method","headers","accept","body","JSON","stringify","comments","map","comment","i","replies","reply","then","response","json","updatedAnimals","prevAnimals","currentAnimals","handleCommentSubmit"],"sources":["/Users/kqasolli/Desktop/Cats and Dogs copy/react-frontend/src/components/content/AddComment.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport CommentAndReplyForm from \"./CommentAndReplyForm\";\n\nexport default function AddComment({ animal, setAnimals }) {\n  // state to keep track of the new comment being added\n  const [newComment, setnewComment] = useState(\"\");\n  // state to determine if the comment form is displayed\n  const [showComment, setshowComment] = useState(false);\n  // state to keep track of the like status of a comment\n  const [likeComment, setLikeComment] = useState({});\n  // state to determine if a comment has been liked\n  const [isLikeClicked, setIsLikeClicked] = useState(false);\n  // state to keep track of the replies to a comment\n  const [showReply, setShowReply] = useState({});\n  const [newReply, setNewReply] = useState(\"\");\n\n  // update the animal state in the parent component with a new comment and also update the backend\n  \n  // function to handle the change in the comment input\n  function handleCommentChange(event) {\n    setnewComment(event.target.value);\n  }\n\n  // function to submit the comment\n  // function handleCommentSubmit(e) {\n  //   e.preventDefault();\n  //   if (newComment && !isLikeClicked) {\n  //     likeComments();\n  //     setnewComment(\"\");\n  //     updateAnimals();\n  //   }\n  //   setIsLikeClicked(false);\n  //   //setnewComment(\"\");\n  //   setshowComment(true);\n  // }\n\n  // function to like a comment and update the json file\n  function likeComments(index) {\n    setLikeComment((prev) => {\n      let newLikeComment = { ...prev };\n      newLikeComment[index] = !newLikeComment[index];\n      return newLikeComment;\n    });\n    // fetch(`http://localhost:3000/animals/${animal.id}`, {\n    //   method: \"PATCH\",\n    //   headers: {\n    //     \"content-type\": \"application/json\",\n    //     accept: \"application/json\",\n    //   },\n    //   body: JSON.stringify({\n    //     comments: animal.comments.map((comment, i) =>\n    //       i === index ? { ...comment, likes: comment.likes + 1 } : comment\n    //     ),\n    //   }),\n    // })\n    //   .then((response) => response.json())\n    //   .then((updatedAnimals) => {\n    //     setAnimals((prevAnimals) =>\n    //       prevAnimals.map((currentAnimals) => {\n    //         if (currentAnimals.id === updatedAnimals.id) {\n    //           return updatedAnimals;\n    //         } else {\n    //           return currentAnimals;\n    //         }\n    //       })\n    //     );\n    //   });\n  }\n\n  // function to show the comments when the comment is clicked\n  function showCommentReplies(commentIndex) {\n    setShowReply((prev) => {\n      let isCommentShown = { ...prev };\n      isCommentShown[commentIndex] = !isCommentShown[commentIndex];\n      return isCommentShown;\n    });\n  }\n\n  //function to assign the state change to the reply\n  function handleReplyChange(e) {\n    setNewReply(e.target.value);\n  }\n\n  // update the reply state in the parent component with a new reply and also update the backend\n  function handleReplySubmit(e, commentIndex) {\n    e.preventDefault();\n\n    fetch(`http://localhost:3000/animals/${animal.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        comments: animal.comments.map((comment, i) => {\n          if (i === commentIndex) {\n            return {\n              ...comment,\n              replies: [...comment.replies, { reply: newReply }],\n            };\n          }\n          return comment;\n        }),\n      }),\n    })\n      .then((response) => response.json())\n      .then((updatedAnimals) => {\n        setAnimals((prevAnimals) =>\n          prevAnimals.map((currentAnimals) => {\n            if (currentAnimals.id === updatedAnimals.id) {\n              return updatedAnimals;\n            } else {\n              return currentAnimals;\n            }\n          })\n        );\n      });\n\n    setNewReply(\"\");\n    setShowReply({});\n  }\n\n  return (\n    <form onSubmit={handleCommentSubmit}>\n      <div className=\"comment-form\">\n        <textarea\n          type=\"text\"\n          value={newComment}\n          onChange={handleCommentChange}\n          placeholder=\"Write a comment...\"\n          className=\"type-comment\"\n        />\n        <PostCommentBtn type=\"submit\">Post</PostCommentBtn>\n      </div>\n    </form>\n    // <CommentAndReplyForm\n    //   handleCommentSubmit={handleCommentSubmit}\n    //   animal={animal}\n    //   setAnimals={setAnimals}\n    //   likeComments={likeComments}\n    //   likeComment={likeComment}\n    //   showCommentReplies={showCommentReplies}\n    //   showReply={showReply}\n    //   newReply={newReply}\n    //   handleReplyChange={handleReplyChange}\n    //   newComment={newComment}\n    //   handleCommentChange={handleCommentChange}\n    //   handleReplySubmit={handleReplySubmit}\n    //   showComment={showComment}\n    // />\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,mBAAmB,MAAM,uBAAuB;AAAC;AAExD,eAAe,SAASC,UAAU,OAAyB;EAAA;EAAA,IAAxB;IAAEC,MAAM;IAAEC;EAAW,CAAC;EACvD;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACrD;EACA,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD;EACA,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACzD;EACA,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;;EAEA;EACA,SAASiB,mBAAmB,CAACC,KAAK,EAAE;IAClCZ,aAAa,CAACY,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,SAASC,YAAY,CAACC,KAAK,EAAE;IAC3BZ,cAAc,CAAEa,IAAI,IAAK;MACvB,IAAIC,cAAc,GAAG;QAAE,GAAGD;MAAK,CAAC;MAChCC,cAAc,CAACF,KAAK,CAAC,GAAG,CAACE,cAAc,CAACF,KAAK,CAAC;MAC9C,OAAOE,cAAc;IACvB,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EAEA;EACA,SAASC,kBAAkB,CAACC,YAAY,EAAE;IACxCZ,YAAY,CAAES,IAAI,IAAK;MACrB,IAAII,cAAc,GAAG;QAAE,GAAGJ;MAAK,CAAC;MAChCI,cAAc,CAACD,YAAY,CAAC,GAAG,CAACC,cAAc,CAACD,YAAY,CAAC;MAC5D,OAAOC,cAAc;IACvB,CAAC,CAAC;EACJ;;EAEA;EACA,SAASC,iBAAiB,CAACC,CAAC,EAAE;IAC5Bb,WAAW,CAACa,CAAC,CAACV,MAAM,CAACC,KAAK,CAAC;EAC7B;;EAEA;EACA,SAASU,iBAAiB,CAACD,CAAC,EAAEH,YAAY,EAAE;IAC1CG,CAAC,CAACE,cAAc,EAAE;IAElBC,KAAK,CAAE,iCAAgC7B,MAAM,CAAC8B,EAAG,EAAC,EAAE;MAClDC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE;MACV,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,QAAQ,EAAErC,MAAM,CAACqC,QAAQ,CAACC,GAAG,CAAC,CAACC,OAAO,EAAEC,CAAC,KAAK;UAC5C,IAAIA,CAAC,KAAKjB,YAAY,EAAE;YACtB,OAAO;cACL,GAAGgB,OAAO;cACVE,OAAO,EAAE,CAAC,GAAGF,OAAO,CAACE,OAAO,EAAE;gBAAEC,KAAK,EAAE9B;cAAS,CAAC;YACnD,CAAC;UACH;UACA,OAAO2B,OAAO;QAChB,CAAC;MACH,CAAC;IACH,CAAC,CAAC,CACCI,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,cAAc,IAAK;MACxB7C,UAAU,CAAE8C,WAAW,IACrBA,WAAW,CAACT,GAAG,CAAEU,cAAc,IAAK;QAClC,IAAIA,cAAc,CAAClB,EAAE,KAAKgB,cAAc,CAAChB,EAAE,EAAE;UAC3C,OAAOgB,cAAc;QACvB,CAAC,MAAM;UACL,OAAOE,cAAc;QACvB;MACF,CAAC,CAAC,CACH;IACH,CAAC,CAAC;IAEJnC,WAAW,CAAC,EAAE,CAAC;IACfF,YAAY,CAAC,CAAC,CAAC,CAAC;EAClB;EAEA,oBACE;IAAM,QAAQ,EAAEsC,mBAAoB;IAAA,uBAClC;MAAK,SAAS,EAAC,cAAc;MAAA,wBAC3B;QACE,IAAI,EAAC,MAAM;QACX,KAAK,EAAE/C,UAAW;QAClB,QAAQ,EAAEY,mBAAoB;QAC9B,WAAW,EAAC,oBAAoB;QAChC,SAAS,EAAC;MAAc;QAAA;QAAA;QAAA;MAAA,QACxB,eACF,QAAC,cAAc;QAAC,IAAI,EAAC,QAAQ;QAAA,UAAC;MAAI;QAAA;QAAA;QAAA;MAAA,QAAiB;IAAA;MAAA;MAAA;MAAA;IAAA;EAC/C;IAAA;IAAA;IAAA;EAAA;EAER;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ;AAAC,GApJuBf,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
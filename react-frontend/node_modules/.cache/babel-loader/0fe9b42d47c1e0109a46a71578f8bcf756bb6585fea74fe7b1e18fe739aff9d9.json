{"ast":null,"code":"var _jsxFileName = \"/Users/kqasolli/Desktop/capstone/CatsAndDogs/react-frontend/src/components/content/ChatModal.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatModal = _ref => {\n  _s();\n  let {\n    currentUser,\n    author,\n    handleClose,\n    handleChatButtonClick,\n    newMessage,\n    setNewMessage\n  } = _ref;\n  const [conversation, setConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [chatChannel, setChatChannel] = useState(null);\n  useEffect(() => {\n    if (!conversation && currentUser !== null && currentUser !== void 0 && currentUser.id && author !== null && author !== void 0 && author.id) {\n      fetch('http://localhost:3000/conversations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          conversation: {\n            sender_id: currentUser.id,\n            receiver_id: author.id\n          }\n        })\n      }).then(response => response.json()).then(data => {\n        setConversation(data);\n        const channel = createChatChannel(data.id, handleReceivedMessage);\n        setChatChannel(channel);\n      });\n    }\n  }, [conversation, currentUser, author]);\n  useEffect(() => {\n    if (newMessage && conversation && newMessage.conversation_id === conversation.id) {\n      handleReceivedMessage(newMessage);\n    }\n  }, [newMessage, conversation]);\n  const handleReceivedMessage = message => {\n    setMessages(prevMessages => [...prevMessages, message]);\n    if (message.user_id !== currentUser.id) {\n      handleChatButtonClick(author, true);\n      setNewMessage(message);\n    }\n  };\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleSendMessage = () => {\n    if (inputValue.trim() && chatChannel !== null && chatChannel !== void 0 && chatChannel.sendMessage) {\n      chatChannel.sendMessage(inputValue, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id, conversation === null || conversation === void 0 ? void 0 : conversation.id);\n      setInputValue('');\n      handleChatButtonClick(author, false);\n    }\n  };\n  const renderMessages = () => {\n    return messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: message.user_id === currentUser.id ? 'currentUserMessage' : 'authorMessage',\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(ChatModal, \"ku79PjsTRcdmWdkjHRIh6kKZz8o=\");\n_c = ChatModal;\nexport default ChatModal;\nvar _c;\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"names":["ChatModal","currentUser","author","handleClose","handleChatButtonClick","newMessage","setNewMessage","conversation","setConversation","useState","messages","setMessages","inputValue","setInputValue","chatChannel","setChatChannel","useEffect","id","fetch","method","headers","body","JSON","stringify","sender_id","receiver_id","then","response","json","data","channel","createChatChannel","handleReceivedMessage","conversation_id","message","prevMessages","user_id","handleInputChange","event","target","value","handleSendMessage","trim","sendMessage","renderMessages","map","index","content"],"sources":["/Users/kqasolli/Desktop/capstone/CatsAndDogs/react-frontend/src/components/content/ChatModal.js"],"sourcesContent":["const ChatModal = ({\n  currentUser,\n  author,\n  handleClose,\n  handleChatButtonClick,\n  newMessage,\n  setNewMessage,\n}) => {\n  const [conversation, setConversation] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [chatChannel, setChatChannel] = useState(null);\n\n  useEffect(() => {\n    if (!conversation && currentUser?.id && author?.id) {\n      fetch('http://localhost:3000/conversations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n        body: JSON.stringify({\n          conversation: {\n            sender_id: currentUser.id,\n            receiver_id: author.id,\n          },\n        }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          setConversation(data);\n          const channel = createChatChannel(data.id, handleReceivedMessage);\n          setChatChannel(channel);\n        });\n    }\n  }, [conversation, currentUser, author]);\n\n  useEffect(() => {\n    if (newMessage && conversation && newMessage.conversation_id === conversation.id) {\n      handleReceivedMessage(newMessage);\n    }\n  }, [newMessage, conversation]);\n\n  const handleReceivedMessage = (message) => {\n    setMessages((prevMessages) => [...prevMessages, message]);\n    if (message.user_id !== currentUser.id) {\n      handleChatButtonClick(author, true);\n      setNewMessage(message);\n    }\n  };\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() && chatChannel?.sendMessage) {\n      chatChannel.sendMessage(inputValue, currentUser?.id, conversation?.id);\n      setInputValue('');\n      handleChatButtonClick(author, false);\n    }\n  };\n\n  const renderMessages = () => {\n    return messages.map((message, index) => (\n      <div\n        key={index}\n        className={\n          message.user_id === currentUser.id\n            ? 'currentUserMessage'\n            : 'authorMessage'\n        }\n      >\n        <p>{message.content}</p>\n      </div>\n    ));\n  };\n\n  return (\n    <>\n      {/* all the data */}\n    </>\n  );\n};\n\nexport default ChatModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
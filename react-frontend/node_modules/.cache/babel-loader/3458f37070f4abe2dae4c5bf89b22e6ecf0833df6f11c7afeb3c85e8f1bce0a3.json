{"ast":null,"code":"import { createConsumer } from '@rails/actioncable';\nconst getWebSocketURL = () => {\n  return 'ws://localhost:3000/cable';\n};\nconst consumer = createConsumer(getWebSocketURL());\nconst sendMessage = (channel, content, user_id, receiver_id) => {\n  channel.perform('send_message', {\n    content,\n    user_id,\n    receiver_id\n  });\n};\nconst createChatChannel = (receivedMessageCallback, user_id, receiver_id) => {\n  console.log('Creating chat channel');\n  const channel = consumer.subscriptions.create({\n    channel: 'ChatChannel',\n    user_id: user_id,\n    receiver_id: receiver_id\n  }, {\n    connected() {\n      console.log(`Connected to chat channel for user ${user_id} and receiver ${receiver_id}`);\n    },\n    disconnected() {\n      console.log(`Disconnected from chat channel for user ${user_id} and receiver ${receiver_id}`);\n    },\n    received(data) {\n      console.log(\"Received data:\", data);\n      if (data.message && data.message.trim() !== \"\") {\n        receivedMessageCallback({\n          content: data.message.trim(),\n          user_id: data.user_id,\n          receiver_id: data.receiver_id\n        });\n      } else {\n        console.warn(\"Received empty message or message is not defined\");\n      }\n    },\n    send_message(content, user_id, receiver_id) {\n      this.perform('send_message', {\n        content,\n        user_id,\n        receiver_id\n      });\n    }\n  });\n  return {\n    sendMessage: (content, user_id, receiver_id) => channel.send_message(content, user_id, receiver_id)\n  };\n};\nexport default createChatChannel;","map":{"version":3,"names":["createConsumer","getWebSocketURL","consumer","sendMessage","channel","content","user_id","receiver_id","perform","createChatChannel","receivedMessageCallback","console","log","subscriptions","create","connected","disconnected","received","data","message","trim","warn","send_message"],"sources":["/Users/kqasolli/Desktop/capstone/CatsAndDogs/react-frontend/src/components/javascript/channels/chat_channel.js"],"sourcesContent":["import { createConsumer } from '@rails/actioncable';\n\nconst getWebSocketURL = () => {\n  return 'ws://localhost:3000/cable';\n};\n\nconst consumer = createConsumer(getWebSocketURL());\n\nconst sendMessage = (channel, content, user_id, receiver_id) => {\n  channel.perform('send_message', { content, user_id, receiver_id });\n};\n\n\nconst createChatChannel = (receivedMessageCallback, user_id, receiver_id) => {\n  console.log('Creating chat channel');\n  \n  const channel = consumer.subscriptions.create(\n    {\n      channel: 'ChatChannel',\n      user_id: user_id,\n      receiver_id: receiver_id\n    },\n    {\n      connected() {\n        console.log(`Connected to chat channel for user ${user_id} and receiver ${receiver_id}`);\n      },\n\n      disconnected() {\n        console.log(`Disconnected from chat channel for user ${user_id} and receiver ${receiver_id}`);\n      },\n\n      received(data) {\n        console.log(\"Received data:\", data);\n        if (data.message && data.message.trim() !== \"\") {\n          receivedMessageCallback({\n            content: data.message.trim(),\n            user_id: data.user_id,\n            receiver_id: data.receiver_id,\n          });\n        } else {\n          console.warn(\"Received empty message or message is not defined\");\n        }\n      },\n\n      send_message(content, user_id, receiver_id) {\n        this.perform('send_message', { content, user_id, receiver_id });\n      },\n    }\n  );\n\n  return {\n    sendMessage: (content, user_id, receiver_id) => channel.send_message(content, user_id, receiver_id),\n  };\n};\n\n\nexport default createChatChannel;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,oBAAoB;AAEnD,MAAMC,eAAe,GAAG,MAAM;EAC5B,OAAO,2BAA2B;AACpC,CAAC;AAED,MAAMC,QAAQ,GAAGF,cAAc,CAACC,eAAe,EAAE,CAAC;AAElD,MAAME,WAAW,GAAG,CAACC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,WAAW,KAAK;EAC9DH,OAAO,CAACI,OAAO,CAAC,cAAc,EAAE;IAAEH,OAAO;IAAEC,OAAO;IAAEC;EAAY,CAAC,CAAC;AACpE,CAAC;AAGD,MAAME,iBAAiB,GAAG,CAACC,uBAAuB,EAAEJ,OAAO,EAAEC,WAAW,KAAK;EAC3EI,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EAEpC,MAAMR,OAAO,GAAGF,QAAQ,CAACW,aAAa,CAACC,MAAM,CAC3C;IACEV,OAAO,EAAE,aAAa;IACtBE,OAAO,EAAEA,OAAO;IAChBC,WAAW,EAAEA;EACf,CAAC,EACD;IACEQ,SAAS,GAAG;MACVJ,OAAO,CAACC,GAAG,CAAE,sCAAqCN,OAAQ,iBAAgBC,WAAY,EAAC,CAAC;IAC1F,CAAC;IAEDS,YAAY,GAAG;MACbL,OAAO,CAACC,GAAG,CAAE,2CAA0CN,OAAQ,iBAAgBC,WAAY,EAAC,CAAC;IAC/F,CAAC;IAEDU,QAAQ,CAACC,IAAI,EAAE;MACbP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEM,IAAI,CAAC;MACnC,IAAIA,IAAI,CAACC,OAAO,IAAID,IAAI,CAACC,OAAO,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9CV,uBAAuB,CAAC;UACtBL,OAAO,EAAEa,IAAI,CAACC,OAAO,CAACC,IAAI,EAAE;UAC5Bd,OAAO,EAAEY,IAAI,CAACZ,OAAO;UACrBC,WAAW,EAAEW,IAAI,CAACX;QACpB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLI,OAAO,CAACU,IAAI,CAAC,kDAAkD,CAAC;MAClE;IACF,CAAC;IAEDC,YAAY,CAACjB,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAE;MAC1C,IAAI,CAACC,OAAO,CAAC,cAAc,EAAE;QAAEH,OAAO;QAAEC,OAAO;QAAEC;MAAY,CAAC,CAAC;IACjE;EACF,CAAC,CACF;EAED,OAAO;IACLJ,WAAW,EAAE,CAACE,OAAO,EAAEC,OAAO,EAAEC,WAAW,KAAKH,OAAO,CAACkB,YAAY,CAACjB,OAAO,EAAEC,OAAO,EAAEC,WAAW;EACpG,CAAC;AACH,CAAC;AAGD,eAAeE,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
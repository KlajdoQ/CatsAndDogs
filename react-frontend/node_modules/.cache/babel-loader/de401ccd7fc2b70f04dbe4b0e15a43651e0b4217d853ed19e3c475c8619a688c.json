{"ast":null,"code":"var _jsxFileName = \"/Users/kqasolli/Desktop/Cats and Dogs copy/react-frontend/src/components/content/AddComment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CommentAndReplyForm from \"./CommentAndReplyForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddComment(_ref) {\n  _s();\n  let {\n    animal,\n    setAnimals\n  } = _ref;\n  // state to keep track of the new comment being added\n  const [newComment, setnewComment] = useState(\"\");\n  // state to determine if the comment form is displayed\n  const [showComment, setshowComment] = useState(false);\n  // state to keep track of the like status of a comment\n  const [likeComment, setLikeComment] = useState({});\n  // state to determine if a comment has been liked\n  const [isLikeClicked, setIsLikeClicked] = useState(false);\n  // state to keep track of the replies to a comment\n  const [showReply, setShowReply] = useState({});\n  const [newReply, setNewReply] = useState(\"\");\n\n  // update the animal state in the parent component with a new comment and also update the backend\n  function handleCommentSubmit(event) {\n    event.preventDefault();\n    if (newComment) {\n      fetch(`http://localhost:3000/animals/${animal.id}/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          comment: {\n            comment: newComment\n          }\n        })\n      }).then(response => response.json()).then(newComment => {\n        setAnimals(prevAnimals => prevAnimals.map(currentAnimal => {\n          if (currentAnimal.id === animal.id) {\n            return {\n              ...currentAnimal,\n              comments: [...currentAnimal.comments, newComment]\n            };\n          } else {\n            return currentAnimal;\n          }\n        }));\n        setnewComment(\"\");\n      }).catch(error => console.error(error));\n    }\n  }\n  // function to handle the change in the comment input\n  function handleCommentChange(event) {\n    setnewComment(event.target.value);\n  }\n\n  // function to submit the comment\n  // function handleCommentSubmit(e) {\n  //   e.preventDefault();\n  //   if (newComment && !isLikeClicked) {\n  //     likeComments();\n  //     setnewComment(\"\");\n  //     updateAnimals();\n  //   }\n  //   setIsLikeClicked(false);\n  //   //setnewComment(\"\");\n  //   setshowComment(true);\n  // }\n\n  // function to like a comment and update the json file\n  function likeComments(commentIndex) {\n    fetch(`http://localhost:3000/animals/${animal.id}/update_comment_likes?comment_id=${animal.comments[commentIndex].id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(response => response.json()).then(updatedComment => {\n      setLikeComment(prevLikes => {\n        let updatedLikes = [...prevLikes];\n        updatedLikes[commentIndex] = true;\n        return updatedLikes;\n      });\n      setAnimals(prevAnimals => prevAnimals.map(currentAnimal => {\n        if (currentAnimal.id === animal.id) {\n          return {\n            ...currentAnimal,\n            comments: currentAnimal.comments.map(currentComment => currentComment.id === updatedComment.id ? updatedComment : currentComment)\n          };\n        } else {\n          return currentAnimal;\n        }\n      }));\n    }).catch(error => console.error(error));\n  }\n\n  // function to show the comments when the comment is clicked\n  function showCommentReplies(commentIndex) {\n    setShowReply(prev => {\n      let isCommentShown = {\n        ...prev\n      };\n      isCommentShown[commentIndex] = !isCommentShown[commentIndex];\n      return isCommentShown;\n    });\n  }\n\n  //function to assign the state change to the reply\n  function handleReplyChange(e) {\n    setNewReply(e.target.value);\n  }\n\n  // update the reply state in the parent component with a new reply and also update the backend\n  function handleReplySubmit(e, commentIndex) {\n    e.preventDefault();\n    fetch(`http://localhost:3000/animals/${animal.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        comments: animal.comments.map((comment, i) => {\n          if (i === commentIndex) {\n            return {\n              ...comment,\n              replies: [...comment.replies, {\n                reply: newReply\n              }]\n            };\n          }\n          return comment;\n        })\n      })\n    }).then(response => response.json()).then(updatedAnimals => {\n      setAnimals(prevAnimals => prevAnimals.map(currentAnimals => {\n        if (currentAnimals.id === updatedAnimals.id) {\n          return updatedAnimals;\n        } else {\n          return currentAnimals;\n        }\n      }));\n    });\n    setNewReply(\"\");\n    setShowReply({});\n  }\n  return /*#__PURE__*/_jsxDEV(CommentAndReplyForm, {\n    handleCommentSubmit: handleCommentSubmit,\n    animal: animal,\n    setAnimals: setAnimals,\n    likeComments: likeComments,\n    likeComment: likeComment,\n    showCommentReplies: showCommentReplies,\n    showReply: showReply,\n    newReply: newReply,\n    handleReplyChange: handleReplyChange,\n    newComment: newComment,\n    handleCommentChange: handleCommentChange,\n    handleReplySubmit: handleReplySubmit,\n    showComment: showComment\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(AddComment, \"hzWHYMYV4dw+wGVkOxLpFWnj1ec=\");\n_c = AddComment;\nvar _c;\n$RefreshReg$(_c, \"AddComment\");","map":{"version":3,"names":["React","useState","CommentAndReplyForm","AddComment","animal","setAnimals","newComment","setnewComment","showComment","setshowComment","likeComment","setLikeComment","isLikeClicked","setIsLikeClicked","showReply","setShowReply","newReply","setNewReply","handleCommentSubmit","event","preventDefault","fetch","id","method","headers","Accept","body","JSON","stringify","comment","then","response","json","prevAnimals","map","currentAnimal","comments","catch","error","console","handleCommentChange","target","value","likeComments","commentIndex","updatedComment","prevLikes","updatedLikes","currentComment","showCommentReplies","prev","isCommentShown","handleReplyChange","e","handleReplySubmit","accept","i","replies","reply","updatedAnimals","currentAnimals"],"sources":["/Users/kqasolli/Desktop/Cats and Dogs copy/react-frontend/src/components/content/AddComment.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport CommentAndReplyForm from \"./CommentAndReplyForm\";\n\nexport default function AddComment({ animal, setAnimals }) {\n  // state to keep track of the new comment being added\n  const [newComment, setnewComment] = useState(\"\");\n  // state to determine if the comment form is displayed\n  const [showComment, setshowComment] = useState(false);\n  // state to keep track of the like status of a comment\n  const [likeComment, setLikeComment] = useState({});\n  // state to determine if a comment has been liked\n  const [isLikeClicked, setIsLikeClicked] = useState(false);\n  // state to keep track of the replies to a comment\n  const [showReply, setShowReply] = useState({});\n  const [newReply, setNewReply] = useState(\"\");\n\n  // update the animal state in the parent component with a new comment and also update the backend\n  function handleCommentSubmit(event) {\n    event.preventDefault();\n    if (newComment) {\n      fetch(`http://localhost:3000/animals/${animal.id}/comments`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n        body: JSON.stringify({ comment: { comment: newComment} }),\n      })\n        .then((response) => response.json())\n        .then((newComment) => {\n          setAnimals((prevAnimals) =>\n            prevAnimals.map((currentAnimal) => {\n              if (currentAnimal.id === animal.id) {\n                return { ...currentAnimal, comments: [...currentAnimal.comments, newComment] };\n              } else {\n                return currentAnimal;\n              }\n            })\n          );\n          setnewComment(\"\");\n        })\n        .catch((error) => console.error(error));\n    }\n  }\n  // function to handle the change in the comment input\n  function handleCommentChange(event) {\n    setnewComment(event.target.value);\n  }\n\n  // function to submit the comment\n  // function handleCommentSubmit(e) {\n  //   e.preventDefault();\n  //   if (newComment && !isLikeClicked) {\n  //     likeComments();\n  //     setnewComment(\"\");\n  //     updateAnimals();\n  //   }\n  //   setIsLikeClicked(false);\n  //   //setnewComment(\"\");\n  //   setshowComment(true);\n  // }\n\n  // function to like a comment and update the json file\n  function likeComments(commentIndex) {\n    fetch(`http://localhost:3000/animals/${animal.id}/update_comment_likes?comment_id=${animal.comments[commentIndex].id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((updatedComment) => {\n        setLikeComment((prevLikes) => {\n          let updatedLikes = [...prevLikes];\n          updatedLikes[commentIndex] = true;\n          return updatedLikes;\n        });\n  \n        setAnimals((prevAnimals) =>\n          prevAnimals.map((currentAnimal) => {\n            if (currentAnimal.id === animal.id) {\n              return {\n                ...currentAnimal,\n                comments: currentAnimal.comments.map((currentComment) =>\n                  currentComment.id === updatedComment.id ? updatedComment : currentComment\n                ),\n              };\n            } else {\n              return currentAnimal;\n            }\n          })\n        );\n      })\n      .catch((error) => console.error(error));\n  }\n  \n  \n\n  // function to show the comments when the comment is clicked\n  function showCommentReplies(commentIndex) {\n    setShowReply((prev) => {\n      let isCommentShown = { ...prev };\n      isCommentShown[commentIndex] = !isCommentShown[commentIndex];\n      return isCommentShown;\n    });\n  }\n\n  //function to assign the state change to the reply\n  function handleReplyChange(e) {\n    setNewReply(e.target.value);\n  }\n\n  // update the reply state in the parent component with a new reply and also update the backend\n  function handleReplySubmit(e, commentIndex) {\n    e.preventDefault();\n\n    fetch(`http://localhost:3000/animals/${animal.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        comments: animal.comments.map((comment, i) => {\n          if (i === commentIndex) {\n            return {\n              ...comment,\n              replies: [...comment.replies, { reply: newReply }],\n            };\n          }\n          return comment;\n        }),\n      }),\n    })\n      .then((response) => response.json())\n      .then((updatedAnimals) => {\n        setAnimals((prevAnimals) =>\n          prevAnimals.map((currentAnimals) => {\n            if (currentAnimals.id === updatedAnimals.id) {\n              return updatedAnimals;\n            } else {\n              return currentAnimals;\n            }\n          })\n        );\n      });\n\n    setNewReply(\"\");\n    setShowReply({});\n  }\n\n  return (\n    <CommentAndReplyForm\n      handleCommentSubmit={handleCommentSubmit}\n      animal={animal}\n      setAnimals={setAnimals}\n      likeComments={likeComments}\n      likeComment={likeComment}\n      showCommentReplies={showCommentReplies}\n      showReply={showReply}\n      newReply={newReply}\n      handleReplyChange={handleReplyChange}\n      newComment={newComment}\n      handleCommentChange={handleCommentChange}\n      handleReplySubmit={handleReplySubmit}\n      showComment={showComment}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
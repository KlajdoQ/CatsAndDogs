{"ast":null,"code":"var _jsxFileName = \"/Users/kqasolli/Desktop/travel-ed/src/components/content/Comment.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddComment(_ref) {\n  _s();\n  let {\n    animal,\n    setAnimals\n  } = _ref;\n  const [newReply, setNewReply] = useState(\"\");\n  const [showReply, setshowReply] = useState(false);\n  function handleCommentChange(event) {\n    setNewReply(event.target.value);\n  }\n  function handleCommentSubmit(event) {\n    fetch(`http://localhost:3000/animals/${animal.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        comments: [...animal.comments, [newReply]]\n      }\n      //{ comments: [...animal.comments, {text: newReply, likes:0, reply: [], id: animal.comments.length +1}] }\n      )\n    }).then(response => response.json()).then(updatedAnimals => {\n      const updatedAnimalsArray = animal.map(currentAnimals => {\n        if (currentAnimals.id === updatedAnimals.id) {\n          return updatedAnimals;\n        } else {\n          return currentAnimals;\n        }\n      });\n      setAnimals(updatedAnimalsArray);\n    });\n    setnewReply(\"\");\n    setshowReply(true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [animal.comments.map((comments, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"comments-list\",\n        children: [comments, \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)), showReply && /*#__PURE__*/_jsxDEV(\"li\", {\n        children: newReply\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          value: newReply,\n          onChange: handleCommentChange,\n          placeholder: \"Write a comment...\",\n          className: \"type-comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"post-comment-btn\",\n          type: \"submit\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(AddComment, \"/JKmRurXe5QG3PrzWmNqCGCFRlQ=\");\n_c = AddComment;\nvar _c;\n$RefreshReg$(_c, \"AddComment\");","map":{"version":3,"names":["React","useState","AddComment","animal","setAnimals","newReply","setNewReply","showReply","setshowReply","handleCommentChange","event","target","value","handleCommentSubmit","fetch","id","method","headers","accept","body","JSON","stringify","comments","then","response","json","updatedAnimals","updatedAnimalsArray","map","currentAnimals","setnewReply","index"],"sources":["/Users/kqasolli/Desktop/travel-ed/src/components/content/Comment.js"],"sourcesContent":["import React, { useState } from 'react'\n\nexport default function AddComment({animal, setAnimals}) {\n  const [newReply, setNewReply] = useState(\"\")\n  const [showReply, setshowReply] = useState(false)\n\n\n  function handleCommentChange(event) {\n    setNewReply(event.target.value)\n  }\n\n  function handleCommentSubmit(event) {\n\n    fetch(`http://localhost:3000/animals/${animal.id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"content-type\": \"application/json\",\n        accept: \"application/json\"\n      },\n      body: JSON.stringify(\n        {comments: [...animal.comments, [newReply]]}\n        //{ comments: [...animal.comments, {text: newReply, likes:0, reply: [], id: animal.comments.length +1}] }\n        )\n    })\n    .then(response => response.json())\n    .then(updatedAnimals => {\n        const updatedAnimalsArray = animal.map(currentAnimals => {\n            if(currentAnimals.id === updatedAnimals.id) {\n                return updatedAnimals\n            } else {\n                return currentAnimals\n            }\n        })\n        setAnimals(updatedAnimalsArray)\n    })\n    setnewReply(\"\")\n    setshowReply(true)\n  }\n\n\n\n  return (\n    <div>\n      <form onSubmit={handleCommentSubmit} >\n          {animal.comments.map((comments, index) => (\n            <li className=\"comments-list\" key={index}>{comments} </li>\n          ))}\n          {showReply && <li>{newReply}</li>}\n          <div className='comment-form'>\n            <textarea \n              type=\"text\" \n              value={newReply} \n              onChange={handleCommentChange} \n              placeholder=\"Write a comment...\"\n              className=\"type-comment\"\n            />\n            <button className=\"post-comment-btn\" type=\"submit\">Post</button>\n          </div>\n      </form>\n     \n    </div>\n  )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAA;AAEvC,eAAe,SAASC,UAAU,OAAuB;EAAA;EAAA,IAAtB;IAACC,MAAM;IAAEC;EAAU,CAAC;EACrD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAGjD,SAASQ,mBAAmB,CAACC,KAAK,EAAE;IAClCJ,WAAW,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC;EAEA,SAASC,mBAAmB,CAACH,KAAK,EAAE;IAElCI,KAAK,CAAE,iCAAgCX,MAAM,CAACY,EAAG,EAAC,EAAE;MAClDC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE;MACV,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAClB;QAACC,QAAQ,EAAE,CAAC,GAAGnB,MAAM,CAACmB,QAAQ,EAAE,CAACjB,QAAQ,CAAC;MAAC;MAC3C;MAAA;IAEJ,CAAC,CAAC,CACDkB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,cAAc,IAAI;MACpB,MAAMC,mBAAmB,GAAGxB,MAAM,CAACyB,GAAG,CAACC,cAAc,IAAI;QACrD,IAAGA,cAAc,CAACd,EAAE,KAAKW,cAAc,CAACX,EAAE,EAAE;UACxC,OAAOW,cAAc;QACzB,CAAC,MAAM;UACH,OAAOG,cAAc;QACzB;MACJ,CAAC,CAAC;MACFzB,UAAU,CAACuB,mBAAmB,CAAC;IACnC,CAAC,CAAC;IACFG,WAAW,CAAC,EAAE,CAAC;IACftB,YAAY,CAAC,IAAI,CAAC;EACpB;EAIA,oBACE;IAAA,uBACE;MAAM,QAAQ,EAAEK,mBAAoB;MAAA,WAC/BV,MAAM,CAACmB,QAAQ,CAACM,GAAG,CAAC,CAACN,QAAQ,EAAES,KAAK,kBACnC;QAAI,SAAS,EAAC,eAAe;QAAA,WAAcT,QAAQ,EAAC,GAAC;MAAA,GAAlBS,KAAK;QAAA;QAAA;QAAA;MAAA,QACzC,CAAC,EACDxB,SAAS,iBAAI;QAAA,UAAKF;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAM,eACjC;QAAK,SAAS,EAAC,cAAc;QAAA,wBAC3B;UACE,IAAI,EAAC,MAAM;UACX,KAAK,EAAEA,QAAS;UAChB,QAAQ,EAAEI,mBAAoB;UAC9B,WAAW,EAAC,oBAAoB;UAChC,SAAS,EAAC;QAAc;UAAA;UAAA;UAAA;QAAA,QACxB,eACF;UAAQ,SAAS,EAAC,kBAAkB;UAAC,IAAI,EAAC,QAAQ;UAAA,UAAC;QAAI;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QAC5D;IAAA;MAAA;MAAA;MAAA;IAAA;EACH;IAAA;IAAA;IAAA;EAAA,QAEH;AAEV;AAAC,GA5DuBP,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}